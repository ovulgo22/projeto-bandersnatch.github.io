/*
    PROJETO: Documenta√ß√£o de Ciberseguran√ßa Web
    ARQUIVO: script.js
    VERS√ÉO: 4.0
    DATA: 03/09/2025 (06:25 America/Sao_Paulo)
    
    CHANGELOG v4.0 (MEGA ATUALIZA√á√ÉO - NOVA TEM√ÅTICA):
    - CORRE√á√ÉO (L√ìGICA DE TEMA): Refatorado para a nova abordagem "dark-first" do CSS.
      - O script agora alterna a classe `.light-theme` no elemento <html>.
      - A l√≥gica de `localStorage` e `prefers-color-scheme` foi invertida para refletir que escuro √© o padr√£o.
    - MANUTEN√á√ÉO (SCROLL SPY): O m√≥dulo de Scroll Spy foi mantido, pois ser√° utilizado
      nas futuras p√°ginas de detalhe. Sua l√≥gica condicional previne a execu√ß√£o na p√°gina principal.
    - LIMPEZA: Coment√°rios e vari√°veis atualizados para a nova tem√°tica.
*/

document.addEventListener('DOMContentLoaded', () => {

    // --- M√ìDULO 1: ALTERN√ÇNCIA DE TEMA (L√≥gica invertida para "dark-first") ---

    (() => {
        const themeToggleButton = document.getElementById('theme-toggle');
        const htmlElement = document.documentElement;

        if (!themeToggleButton) {
            console.warn('Bot√£o de altern√¢ncia de tema n√£o encontrado no DOM.');
            return;
        }

        const ICONS = { light: '‚òÄÔ∏è', dark: 'üåô' };

        const applyTheme = (theme) => {
            // Se o tema for 'light', adiciona a classe. Se for 'dark', remove (voltando ao padr√£o).
            htmlElement.classList.toggle('light-theme', theme === 'light');
            
            // O label e o √≠cone s√£o o OPOSTO do tema atual. Se o tema √© claro, o bot√£o mostra a lua para MUDAR para escuro.
            const newLabel = `Alternar para tema ${theme === 'light' ? 'escuro' : 'claro'}`;
            themeToggleButton.setAttribute('aria-label', newLabel);
            themeToggleButton.innerHTML = theme === 'light' ? ICONS.dark : ICONS.light;

            localStorage.setItem('theme', theme);
        };

        const savedTheme = localStorage.getItem('theme');
        // Agora, o n√£o-padr√£o √© o tema claro.
        const systemPrefersLight = window.matchMedia('(prefers-color-scheme: light)').matches;

        // O tema inicial ser√° o salvo, OU 'light' se o sistema preferir, OU o padr√£o ('dark').
        const initialTheme = savedTheme || (systemPrefersLight ? 'light' : 'dark');
        
        applyTheme(initialTheme);

        themeToggleButton.addEventListener('click', () => {
            // Verifica o tema atual pela aus√™ncia ou presen√ßa da classe.
            const currentTheme = htmlElement.classList.contains('light-theme') ? 'light' : 'dark';
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';
            applyTheme(newTheme);
        });
    })();


    // --- M√ìDULO 2: SCROLL SPY PARA P√ÅGINAS DE DETALHE (Mantido para uso futuro) ---
    
    // Esta l√≥gica n√£o ser√° executada na p√°gina principal (index.html), pois
    // o elemento '.sidebar-nav' n√£o existe nela. Ela aguarda as p√°ginas de conte√∫do.
    const sidebarNav = document.querySelector('.sidebar-nav');

    if (sidebarNav) {
        (() => {
            // Nota: a classe '.content-section' poder√° ser usada nas p√°ginas de detalhe
            // no lugar de '.role-section' para se adequar √† nova tem√°tica.
            const sections = document.querySelectorAll('.content-section'); 
            const navLinks = sidebarNav.querySelectorAll('a:not(.back-link)');

            if (sections.length === 0 || navLinks.length === 0) {
                return;
            }

            const observerOptions = {
                root: null,
                rootMargin: '-40% 0px -60% 0px',
                threshold: 0
            };

            const observerCallback = (entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const currentSectionId = entry.target.id;
                        
                        navLinks.forEach(link => {
                            link.classList.remove('active');
                        });

                        const activeLink = sidebarNav.querySelector(`a[href="#${currentSectionId}"]`);
                        if (activeLink) {
                            activeLink.classList.add('active');
                        }
                    }
                });
            };

            const observer = new IntersectionObserver(observerCallback, observerOptions);
            sections.forEach(section => {
                observer.observe(section);
            });
        })();
    }

});
